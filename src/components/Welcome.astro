---
import { questions } from '../data/questions';
---

<section class="Section">
	<header>❧ <span class="header-span">Pytaj</span>, jakby jutra miało nie być. Odpowiemy!</header>
	<div class="questions-container">
		{questions.map(({ number, question, answer }) => (
			<div class="question-box">
				<div class="question-header">
					<span class="number">{number}</span>
					<h2>{question}</h2>
					<button class="expand-button" aria-label="Toggle answer">
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<circle cx="12" cy="12" r="11.5" stroke="url(#circleGradient)" fill="none" stroke-width="1.5"/>
							<path class="horizontal" d="M7 12L17 12" stroke="url(#circleGradient)" stroke-width="1.5"/>
							<path class="vertical" d="M12 7L12 17" stroke="url(#circleGradient)" stroke-width="1.5"/>
							<defs>
								<linearGradient id="circleGradient" x1="0" y1="0" x2="24" y2="24" gradientTransform="rotate(266)" gradientUnits="userSpaceOnUse">
									<stop stop-color="#2dd282"/>
									<stop offset="1" stop-color="#90f4e8"/>
								</linearGradient>
							</defs>
						</svg>
					</button>
				</div>
				<p class="answer">{answer}</p>
			</div>
		))}
	</div>
	<div class="load-more-wrapper">
		<div class="progress-container">
			<div class="progress-bar">
				<div class="progress-line" style="width: calc((var(--loaded-questions) / 20) * 100%)">
					<div class="questions-counter">
						<span id="currentQuestions">10&nbsp;</span>/<span>&nbsp;20</span>
						<div class="arrow"></div>
					</div>
				</div>
			</div>
		</div>
		<button class="load-more-button">
			Wczytaj więcej
			<svg class="arrow-down" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
				<defs>
					<linearGradient id="arrowGradient" x1="0" y1="0" x2="100%" y2="100%" gradientUnits="userSpaceOnUse">
						<stop offset="0%" stop-color="#2dd282"/>
						<stop offset="100%" stop-color="#90f4e8"/>
					</linearGradient>
				</defs>
				<g>
					<path d="M7 1.75V12.25M12.25 7L7 12.25L1.75 7" stroke="url(#arrowGradient)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
				</g>
			</svg>
		</button>
	</div>
</section>

<style lang="scss">
	$gradient: linear-gradient(266deg, #2dd282, #90f4e8);
	$text-color: #F0F7F7;
	$border-color: #75758A;
	$hover-color: #A3A3BE;
	$transition-bezier: cubic-bezier(0.4, 0, 0.2, 1);

	.Section {
		padding: 64px 40px 40px 40px;
		
		@media (max-width: 768px) {
			padding: 40px 80px 40px 80px;
		}

		@media (max-width: 360px) {
			padding: 40px 16px 40px 16px;
		}
		
		header {
			color: $text-color;
			font-weight: 400;
			font-size: clamp(1.375rem, calc(1.5vw / 0.48), 1.5rem);

			.header-span {
				background: $gradient;
				-webkit-text-fill-color: transparent;
				-webkit-background-clip: text;
			}

			@media (max-width: 768px) {
				margin-bottom: 48px;
			}
		}
	}

	.question-box {
		margin-top: 0;
		padding: 20px 16px 24px 16px;
		display: flex;
		flex-direction: column;
		position: relative;
		border-bottom: 1px solid $border-color;
		
		&:first-of-type {
			margin-top: 32px;
		}
		
		&::before {
			content: '';
			position: absolute;
			bottom: -1px;
			left: 0;
			width: 0;
			height: 1px;
			background: $hover-color;
			transition: width 0.55s $transition-bezier;
		}

		&:hover::before {
			width: 100%;
		}
		
		&::after {
			content: '';
			position: absolute;
			bottom: -1px;
			left: 0;
			width: 0;
			height: 1px;
			background: $gradient;
			transition: width 0.55s $transition-bezier;
			z-index: 1;
		}

		&.active {
			.answer {
				display: block;
			}

			&::after {
				width: 100%;
			}
		}
		
		.question-header {
			display: flex;
			align-items: center;
			gap: 2rem;
			width: 100%;
		}

		.number {
			color: $text-color;
			font-size: 1rem;
			font-weight: 500;
			min-width: 32px;
		}

		@media (max-width: 360px) {
			.number {
				min-width: 0px;
			}
		}

		h2 {
			color: $text-color;
			font-size: 1rem;
			font-weight: 500;
			display: inline-block;
		}

		.expand-button {
			background-color: transparent;
			border: none;
			cursor: pointer;
			padding: 0;
			margin-left: auto;

			svg {
				width: 20px;
				height: 20px;
				display: block;
			}

			.vertical {
				transform-origin: center;
				transition: transform 0.3s $transition-bezier;
			}

			&.active .vertical {
				transform: scaleY(0);
			}
		}

		.answer {
			display: none;
			color: $text-color;
			font-size: 1rem;
			line-height: 1.6;
			width: 100%;
			max-width: 574px;
			padding-left: calc(32px + 2rem);
			margin-top: 1.25rem;

			@media (max-width: 768px) {
				max-width: calc(100% - (32px + 2rem));
				word-wrap: break-word;
				overflow-wrap: break-word;
				hyphens: auto;
			}

			@media (max-width: 360px) {
				max-width: calc(100% - (16px + 4rem));
				word-wrap: break-word;
				overflow-wrap: break-word;
				hyphens: auto;
				padding-left: calc(12px + 2rem);
			}

			
		}
	}

	.progress-container {
		width: 100%;
		margin-bottom: 13.5px;
		padding-top: 30px;
	}

	.progress-bar {
		width: 100%;
		height: 2px;
		background: #064040;
		overflow: visible;
		position: relative;
	}

	.progress-line {
		height: 100%;
		background: $gradient;
		transition: width 0.6s cubic-bezier(0.4, 0, 0.2, 1);
		position: relative;
		will-change: width;
	}

	.questions-counter {
		position: absolute;
		background: #042B2B;
		color: #fff;
		padding: 0px 4px;
		border-radius: 100px;
		font-size: 0.8rem;
		right: 0;
		top: -42px;
		transform: translateX(50%);
		transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
		white-space: nowrap;
		width: 49px;
		height: 28.49px;
		display: flex;
		align-items: center;
		justify-content: center;

		.arrow {
			position: absolute;
			bottom: -6px;
			left: 50%;
			transform: translateX(-50%);
			width: 0;
			height: 0;
			border-left: 6px solid transparent;
			border-right: 6px solid transparent;
			border-top: 6px solid #042B2B;
		}
	}

	.load-more-wrapper {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin: 48px auto 0;
		width: fit-content;
	}

	.load-more-button {
		display: flex;
		align-items: center;
		gap: 8px;
		background: transparent;
		border: none;
		color: $text-color;
		font-size: 0.9rem;
		cursor: pointer;
		transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
		width: 100%;
		padding: 0;
	}
</style>

<script>
	import { getNextQuestions } from '../data/questions';

	const buttons = document.querySelectorAll('.expand-button');
	const loadMoreButton = document.querySelector('.load-more-button') as HTMLButtonElement;
	const questionsContainer = document.querySelector('.questions-container') as HTMLElement;
	const progressLine = document.querySelector('.progress-line') as HTMLElement;
	let currentPage = 1;
	const currentQuestionsElement = document.querySelector('#currentQuestions');
	let loadedQuestions = 10;

	document.documentElement.style.setProperty('--loaded-questions', loadedQuestions.toString());

	console.log('Initial setup:', { questionsContainer, loadMoreButton });
	
	buttons.forEach(button => {
		button.addEventListener('click', () => {
			const questionBox = button.closest('.question-box');
			if (questionBox) {
				questionBox.classList.toggle('active');
				button.classList.toggle('active');
			}
		});
	});

	if (loadMoreButton && questionsContainer) {
		loadMoreButton.addEventListener('click', () => {
			const nextQuestions = getNextQuestions(currentPage);
			
			if (nextQuestions.length === 0) return;

			nextQuestions.forEach(({ number, question, answer }) => {
				const existingQuestion = document.querySelector('.question-box');
				if (!existingQuestion) return;

				const newQuestionBox = existingQuestion.cloneNode(true) as HTMLElement;
				
				const numberElement = newQuestionBox.querySelector('.number');
				const questionElement = newQuestionBox.querySelector('h2');
				const answerElement = newQuestionBox.querySelector('.answer');

				if (numberElement) numberElement.textContent = number;
				if (questionElement) questionElement.textContent = question;
				if (answerElement) answerElement.textContent = answer;

				newQuestionBox.classList.remove('active');
				const newButton = newQuestionBox.querySelector('.expand-button');
				if (newButton) {
					newButton.classList.remove('active');
					
					newButton.addEventListener('click', () => {
						newQuestionBox.classList.toggle('active');
						newButton.classList.toggle('active');
					});
				}

				questionsContainer.appendChild(newQuestionBox);
			});

			currentPage++;
			loadedQuestions += 5;
			document.documentElement.style.setProperty('--loaded-questions', loadedQuestions.toString());
			if (currentQuestionsElement) {
				currentQuestionsElement.textContent = loadedQuestions.toString();
			}
		});
	}
</script>
